import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler

# Generate synthetic data
np.random.seed(42)
data_size = 500

# Features for the personalized e-commerce platform
personalized_sales = np.random.normal(loc=10000, scale=3000, size=data_size)
general_sales = np.random.normal(loc=8000, scale=2500, size=data_size)
operational_costs = np.random.normal(loc=5000, scale=1500, size=data_size)
customer_acquisition_cost = np.random.normal(loc=200, scale=50, size=data_size)
num_customers = np.random.randint(50, 200, size=data_size)

# Additional features for better accuracy
marketing_spend = np.random.normal(loc=1500, scale=300, size=data_size)  # Simulated marketing spend
customer_retention_rate = np.random.uniform(0.5, 1.0, size=data_size)    # Simulated retention rate
platform_scalability = np.random.uniform(0.7, 1.5, size=data_size)       # Scalability factor

# Profitability Calculation
personalized_profit = personalized_sales - operational_costs - (customer_acquisition_cost * num_customers) + (marketing_spend * customer_retention_rate * platform_scalability)
general_profit = general_sales - operational_costs - (customer_acquisition_cost * num_customers)

# Create a DataFrame
df = pd.DataFrame({
    'personalized_sales': personalized_sales,
    'general_sales': general_sales,
    'operational_costs': operational_costs,
    'customer_acquisition_cost': customer_acquisition_cost,
    'num_customers': num_customers,
    'marketing_spend': marketing_spend,
    'customer_retention_rate': customer_retention_rate,
    'platform_scalability': platform_scalability,
    'personalized_profit': personalized_profit,
    'general_profit': general_profit
})

# Splitting the data into training and testing sets
X = df[['personalized_sales', 'operational_costs', 'customer_acquisition_cost', 'num_customers', 'marketing_spend', 'customer_retention_rate', 'platform_scalability']]
y = df['personalized_profit']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scaling the data
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Hyperparameter Tuning with GridSearchCV for RandomForestRegressor
param_grid = {
    'n_estimators': [100, 200, 300],
    'max_depth': [10, 15, 20],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4],
    'bootstrap': [True, False]
}

# Model Selection with Random Forest Regressor and Grid Search
rf_model = RandomForestRegressor(random_state=42)
grid_search = GridSearchCV(estimator=rf_model, param_grid=param_grid, cv=5, scoring='neg_mean_squared_error', verbose=2, n_jobs=-1)
grid_search.fit(X_train_scaled, y_train)

# Best parameters from Grid Search
best_rf_model = grid_search.best_estimator_

# Predictions
y_pred = best_rf_model.predict(X_test_scaled)

# Model Evaluation
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f'Best Parameters from GridSearchCV: {grid_search.best_params_}')
print(f'Mean Squared Error: {mse:.2f}')
print(f'R-squared: {r2:.2f}')

# Cross-validation to further check model performance
cv_scores = cross_val_score(best_rf_model, X_train_scaled, y_train, cv=5, scoring='neg_mean_squared_error')
cv_mse = -1 * cv_scores.mean()
print(f'Cross-Validated Mean Squared Error: {cv_mse:.2f}')

# Visualization
plt.figure(figsize=(14, 7))

# Plotting the predicted profitability vs actual profitability
plt.subplot(1, 2, 1)
plt.scatter(y_test, y_pred, alpha=0.7)
plt.title('Predicted vs Actual Profitability')
plt.xlabel('Actual Profitability')
plt.ylabel('Predicted Profitability')
plt.plot([y.min(), y.max()], [y.min(), y.max()], color='red', lw=2)  # Diagonal line
plt.grid(True)

# Plotting the comparison of personalized vs general profits
plt.subplot(1, 2, 2)
plt.bar(['Personalized E-commerce', 'General Platforms'], 
        [df['personalized_profit'].mean(), df['general_profit'].mean()], 
        color=['#2980b9', '#e74c3c'])
plt.title('Average Profitability Comparison')
plt.ylabel('Average Profitability')
plt.grid(axis='y')

plt.tight_layout()
plt.show()
